<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Some blog</title>
    <link>http://odushyn.github.io/post/</link>
    <description>Recent content in Posts on Some blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://odushyn.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My favourite tips from &#39;The Pragmatic Programmers&#39; book</title>
      <link>http://odushyn.github.io/post/pragmatic-programmer-2020/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://odushyn.github.io/post/pragmatic-programmer-2020/</guid>
      <description>20 years ago were published a currently well known book &amp;ldquo;The pragmatic Programmer&amp;rdquo;. This is one of not many books which is still relevant after 20 years, and some recommendations from there would probably never become outdated.
20 years later since first publication world can enjoy the second edition of the book. Outdated information and code examples are updated to nowadays reality. The core ideas of the book stayed tha same, though.</description>
    </item>
    
    <item>
      <title>Most often used rxjs operators</title>
      <link>http://odushyn.github.io/post/rxjs-most-often-used-operators/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://odushyn.github.io/post/rxjs-most-often-used-operators/</guid>
      <description>In the previous post I was explaining the main concept behind rxjs library. In this one I am going to cover the most often used operators from rxjs library. I will show basic examples of their usage inside angular application.
Full source code is available on github.
1. map - modifies values emitted by observable Let&amp;rsquo;s assume we have http service that returns user information in json format.
{ &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;: 24, &amp;quot;hobbies&amp;quot;: [], .</description>
    </item>
    
    <item>
      <title>The main idea behind rxjs</title>
      <link>http://odushyn.github.io/post/rxjs-main-concept/</link>
      <pubDate>Tue, 10 Jul 2018 23:31:01 +0200</pubDate>
      
      <guid>http://odushyn.github.io/post/rxjs-main-concept/</guid>
      <description>What is rxjs? ReactiveX is a library for composing asynchronous and event-based programs by using observable sequences. rxjs is implementation of Observer pattern in javascript programming language (source).
Not clear yet&amp;hellip;
All my following examples are taken from official guide.
First example: create observable  Count how many times the button was clicked.  Straightforward solution via using event listener and implementing callback function.
var count = 0; var button = document.</description>
    </item>
    
    <item>
      <title>State Pattern. JavaScript implementation.</title>
      <link>http://odushyn.github.io/post/state-pattern-js/</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://odushyn.github.io/post/state-pattern-js/</guid>
      <description>Introduction: According to wikipedia it is a behavioral software design pattern that implements a state machine in an object-oriented way.
What&amp;rsquo;s state machine? Finite State Machine(FSM) is some abstract machine that can be in exactly one state at particular moment of time and has rules for changing the states(making transition).
Basically, FSM can be defined by 3 things:
 list of states rules for chaning the states initial state  Examples We interact with state machines every day.</description>
    </item>
    
    <item>
      <title>HTTP. How to return errors to clients?</title>
      <link>http://odushyn.github.io/post/http-return-errors-to-clients/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://odushyn.github.io/post/http-return-errors-to-clients/</guid>
      <description>HTTP is based on the exchange of representations. Errors are not an exception. Whenever error happens on a server either because of wrong request or server internal problems - always return a representation that reflects the current state of the error.
Response must contain:
 Response code Body containing the error description.  Response code   Helps clients to understand the reason why error happened
Return 4xx status code for errors due to client inputs, 5xx - for errors due to server implementation.</description>
    </item>
    
  </channel>
</rss>
